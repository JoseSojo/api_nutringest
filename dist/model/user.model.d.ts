import { PrismaService } from "src/prisma/prisma.service";
import { Prisma } from "@prisma/client";
export default class UserModel {
    private prisma;
    constructor(prisma: PrismaService);
    create({ data }: {
        data: Prisma.UserCreateInput;
    }): Promise<{
        id: string;
        name: string | null;
        isDelete: boolean;
        createAt: Date;
        updateAt: Date | null;
        email: string;
        username: string;
        password: string;
        ci: string | null;
        name2: string | null;
        lastname2: string | null;
        nacionality: string | null;
        email2: string | null;
        phone: string | null;
        phone2: string | null;
        propietaryCode: string;
        code: string | null;
        age: number | null;
        genero: string | null;
        lastname: string | null;
        passwordRequetsAt: Date | null;
        passwordRequetsToken: string | null;
        token: string | null;
        parentId: string | null;
        rolId: string | null;
        languajeId: string | null;
        cityId: string | null;
    }>;
    findAll({ skip, take, filter, select }: {
        skip?: number;
        take?: number;
        filter?: Prisma.UserWhereInput;
        select?: Prisma.UserSelect;
    }): Promise<({
        _count: {
            nutricionist: number;
            patient: number;
            parentReference: number;
            childs: number;
            rolReference: number;
            languajeReference: number;
            cityReference: number;
            subscriptionReference: number;
            paymentUser: number;
            finance: number;
            subscriptionSecondTask: number;
            wallet: number;
            exchangeList: number;
            coupons: number;
            permissions: number;
            sessions: number;
            countrys: number;
            states: number;
            citys: number;
            languaje: number;
            coins: number;
            paymentMethod: number;
            subscription: number;
            subscriptionDetail: number;
            byNotifications: number;
            forNotifications: number;
            supplements: number;
            unityMeasure: number;
            Presentation: number;
            menus: number;
            photoQuote: number;
            calendar: number;
            calendarHistory: number;
            history: number;
        };
        rolReference: {
            id: string;
            name: string;
            createById: string | null;
            isDelete: boolean;
            createAt: Date;
            updateAt: Date;
            roles: Prisma.JsonValue;
        };
    } & {
        id: string;
        name: string | null;
        isDelete: boolean;
        createAt: Date;
        updateAt: Date | null;
        email: string;
        username: string;
        password: string;
        ci: string | null;
        name2: string | null;
        lastname2: string | null;
        nacionality: string | null;
        email2: string | null;
        phone: string | null;
        phone2: string | null;
        propietaryCode: string;
        code: string | null;
        age: number | null;
        genero: string | null;
        lastname: string | null;
        passwordRequetsAt: Date | null;
        passwordRequetsToken: string | null;
        token: string | null;
        parentId: string | null;
        rolId: string | null;
        languajeId: string | null;
        cityId: string | null;
    })[]>;
    find({ filter, select }: {
        filter?: Prisma.UserWhereInput;
        select?: Prisma.UserSelect;
    }): Promise<{
        _count: {
            nutricionist: number;
            patient: number;
            parentReference: number;
            childs: number;
            rolReference: number;
            languajeReference: number;
            cityReference: number;
            subscriptionReference: number;
            paymentUser: number;
            finance: number;
            subscriptionSecondTask: number;
            wallet: number;
            exchangeList: number;
            coupons: number;
            permissions: number;
            sessions: number;
            countrys: number;
            states: number;
            citys: number;
            languaje: number;
            coins: number;
            paymentMethod: number;
            subscription: number;
            subscriptionDetail: number;
            byNotifications: number;
            forNotifications: number;
            supplements: number;
            unityMeasure: number;
            Presentation: number;
            menus: number;
            photoQuote: number;
            calendar: number;
            calendarHistory: number;
            history: number;
        };
        rolReference: {
            id: string;
            name: string;
            createById: string | null;
            isDelete: boolean;
            createAt: Date;
            updateAt: Date;
            roles: Prisma.JsonValue;
        };
        cityReference: {
            id: string;
            name: string;
            stateReference: {
                id: string;
                name: string;
                countryReference: {
                    id: string;
                    name: string;
                };
            };
        };
    } & {
        id: string;
        name: string | null;
        isDelete: boolean;
        createAt: Date;
        updateAt: Date | null;
        email: string;
        username: string;
        password: string;
        ci: string | null;
        name2: string | null;
        lastname2: string | null;
        nacionality: string | null;
        email2: string | null;
        phone: string | null;
        phone2: string | null;
        propietaryCode: string;
        code: string | null;
        age: number | null;
        genero: string | null;
        lastname: string | null;
        passwordRequetsAt: Date | null;
        passwordRequetsToken: string | null;
        token: string | null;
        parentId: string | null;
        rolId: string | null;
        languajeId: string | null;
        cityId: string | null;
    }>;
    count({ filter }: {
        filter?: Prisma.UserWhereInput;
    }): Promise<number>;
    update({ filter, data }: {
        filter?: Prisma.UserWhereUniqueInput;
        data: Prisma.UserUpdateInput;
    }): Promise<{
        id: string;
        name: string | null;
        isDelete: boolean;
        createAt: Date;
        updateAt: Date | null;
        email: string;
        username: string;
        password: string;
        ci: string | null;
        name2: string | null;
        lastname2: string | null;
        nacionality: string | null;
        email2: string | null;
        phone: string | null;
        phone2: string | null;
        propietaryCode: string;
        code: string | null;
        age: number | null;
        genero: string | null;
        lastname: string | null;
        passwordRequetsAt: Date | null;
        passwordRequetsToken: string | null;
        token: string | null;
        parentId: string | null;
        rolId: string | null;
        languajeId: string | null;
        cityId: string | null;
    }>;
    softDelete({ id }: {
        id: string;
    }): Promise<{
        id: string;
        name: string | null;
        isDelete: boolean;
        createAt: Date;
        updateAt: Date | null;
        email: string;
        username: string;
        password: string;
        ci: string | null;
        name2: string | null;
        lastname2: string | null;
        nacionality: string | null;
        email2: string | null;
        phone: string | null;
        phone2: string | null;
        propietaryCode: string;
        code: string | null;
        age: number | null;
        genero: string | null;
        lastname: string | null;
        passwordRequetsAt: Date | null;
        passwordRequetsToken: string | null;
        token: string | null;
        parentId: string | null;
        rolId: string | null;
        languajeId: string | null;
        cityId: string | null;
    }>;
    recovery({ id }: {
        id: string;
    }): Promise<{
        id: string;
        name: string | null;
        isDelete: boolean;
        createAt: Date;
        updateAt: Date | null;
        email: string;
        username: string;
        password: string;
        ci: string | null;
        name2: string | null;
        lastname2: string | null;
        nacionality: string | null;
        email2: string | null;
        phone: string | null;
        phone2: string | null;
        propietaryCode: string;
        code: string | null;
        age: number | null;
        genero: string | null;
        lastname: string | null;
        passwordRequetsAt: Date | null;
        passwordRequetsToken: string | null;
        token: string | null;
        parentId: string | null;
        rolId: string | null;
        languajeId: string | null;
        cityId: string | null;
    }>;
}
